/*-----------------------------------------------------------------------------
-					         SE/CprE 185 Lab 04
-             Developed for 185-Rursch by T.Tran and K.Wang
-----------------------------------------------------------------------------*/

/*-----------------------------------------------------------------------------
-	                            Includes
-----------------------------------------------------------------------------*/
#include <stdio.h>
#include <math.h>


/*-----------------------------------------------------------------------------
-	                            Defines
-----------------------------------------------------------------------------*/


/*-----------------------------------------------------------------------------
-	                            Prototypes
-----------------------------------------------------------------------------*/
	int close_to (double tolerance, double point, double value);
	double mag(double x, double y, double z);
	double max;
	double min;
	double value;
	double distance (double totalT);
	double velocity (double vInit, double tPrev, double t, double accel);
/*----------------------------------------------------------------------------
-							  Implementation
-----------------------------------------------------------------------------*/
int main(void) {
    double gx, gy, gz;
	int t;
	double ti, tf, totalT, xt;
	double v = 0;
	double tPrev = 0;
	double pos = 0;
	
	printf("Declan Creadon\n");
	printf("Netid: dcreadon\n");
	scanf("%lf, %lf, %lf, %lf", &t, &gx, &gy, &gz);
	printf("Ok, I'm now receiving data.\n");
	
	printf("I'm waiting");
    while (close_to (0.25, 1.0, mag(gx, gy, gz))) {	
	scanf("%d, %lf, %lf, %lf", &t, &gx, &gy, &gz);
		if (close_to(15, 0, (t % 500))) {
			printf(".");
		}
		fflush(stdout);
    }
	printf("\n");
	ti = t;
	tPrev = t;
	printf("\tHelp me! I'm Falling");
	fflush(stdout);

	while (close_to (0.25, 1.0, mag(gx, gy, gz)) == 0) {
		scanf("%d, %lf, %lf, %lf", &t, &gx, &gy, &gz);
		if (close_to(10, 0, (t % 100))) {
			printf("!");
			fflush(stdout);
		}
		v = velocity(v, t/1000.0, tPrev/1000.0, mag(gx, gy, gz)); //calculates velo while falling
		pos = pos + v * (t - tPrev); //calculates position while falling
		tPrev = t;
		
	}
	printf("\n");
	
	tf = t;
	totalT = (tf - ti);
	totalT = (totalT / 1000);
	xt = distance(totalT);
	
	printf("\t\tOuch! I fell %.3lf meters in %.3lf seconds\n", xt, totalT);
	printf("Compensating for air resistance, the fall was %lf meters.\n", pos); //prints the new position bases on air resitance
	printf("This is %.0lf%% less than computed before.", 100 - (pos/xt) *  100); // prints and calculates the percentage of air resistance
	
    return 0;

}
/* Put your functions here */
	double mag(double x, double y, double z) {
		double accel = sqrt((x * x) + (y * y) + (z * z));
		return (accel);
	}
	int close_to (double tolerance, double point, double value) {
		double test1 = point + tolerance;
		double test2 = point - tolerance;
	
	if ((value <= test1) && (value >= test2)){
		return 1;
	}
	else {
		return 0;
	}
	}
	
	double distance (double totalT) {
		double x1 = 0.5 * 9.8 * (totalT * totalT);
		return x1;
	}
	double velocity (double vInit, double t, double tPrev, double accel) {
		double velo = (vInit + (9.8 * (1-accel)) * (t/1000 - tPrev/1000));
		return velo;
		
	}
